{
  "address": "0xb9B17Cdc38f10B3672924F4F81480AE38AC5Fa6A",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "vrfCoordinatorV2",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "entranceFee",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "gasLane",
          "type": "bytes32"
        },
        {
          "internalType": "uint64",
          "name": "subscriptionId",
          "type": "uint64"
        },
        {
          "internalType": "uint32",
          "name": "callbackGasLimit",
          "type": "uint32"
        },
        {
          "internalType": "uint256",
          "name": "interval",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "currentBalance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "numPlayers",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lotteryState",
          "type": "uint256"
        }
      ],
      "name": "Lottery_UpkeepNotNeeded",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Lottery__InsufficientEntranceFee",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Lottery__NotOpen",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Lottery__TransferFailed",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "have",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "want",
          "type": "address"
        }
      ],
      "name": "OnlyCoordinatorCanFulfill",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "player",
          "type": "address"
        }
      ],
      "name": "LotteryEnter",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        }
      ],
      "name": "LotteryWinner",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "winner",
          "type": "address"
        }
      ],
      "name": "WinnerPicked",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "checkUpkeep",
      "outputs": [
        {
          "internalType": "bool",
          "name": "upkeepNeeded",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "enterLottery",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getEntranceFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getInterval",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLastTimeStamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLotteryState",
      "outputs": [
        {
          "internalType": "enum Lottery.LotteryState",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNumWords",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNumberOfPlayers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getPlayer",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRecentWinner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRequestConfirmations",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "performUpkeep",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "randomWords",
          "type": "uint256[]"
        }
      ],
      "name": "rawFulfillRandomWords",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x55049443cba3fede629c4972f3ec700dd95cd9f98d91fef034e3ba88fa086292",
  "receipt": {
    "to": null,
    "from": "0x2b656F44805D1bAa4a00fa5E8eF81Ef3b94ab446",
    "contractAddress": "0xb9B17Cdc38f10B3672924F4F81480AE38AC5Fa6A",
    "transactionIndex": 82,
    "gasUsed": "1203856",
    "logsBloom": "0x
    "blockHash": "0xf5e1840008525590d44d19906454b31089ff38ffe8f9a8340ccd8d3a55434905",
    "transactionHash": "0x55049443cba3fede629c4972f3ec700dd95cd9f98d91fef034e3ba88fa086292",
    "logs": [],
    "blockNumber": 4048593,
    "cumulativeGasUsed": "10800456",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x8103B0A8A00be2DDC778e6e7eaa21791Cd364625",
    "10000000000000000",
    "0x474e34a077df58807dbe9c96d3c009b23b3c6d0cce433e59bbf5b34f823bc56c",
    "4313",
    "500000",
    "30"
  ],
  "numDeployments": 2,
  "solcInputHash": "0adb211c59f970c6b14d5127f48cf117",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vrfCoordinatorV2\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"entranceFee\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"gasLane\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"subscriptionId\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"callbackGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"interval\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"currentBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numPlayers\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lotteryState\",\"type\":\"uint256\"}],\"name\":\"Lottery_UpkeepNotNeeded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Lottery__InsufficientEntranceFee\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Lottery__NotOpen\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Lottery__TransferFailed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"OnlyCoordinatorCanFulfill\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"}],\"name\":\"LotteryEnter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"name\":\"LotteryWinner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"}],\"name\":\"WinnerPicked\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"checkUpkeep\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"upkeepNeeded\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enterLottery\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEntranceFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getInterval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLastTimeStamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLotteryState\",\"outputs\":[{\"internalType\":\"enum Lottery.LotteryState\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumWords\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumberOfPlayers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getPlayer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRecentWinner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRequestConfirmations\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"performUpkeep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Aditya Padekar\",\"details\":\"This contract implements the Chainlink VRF version 2 in order to implement true randomness\",\"kind\":\"dev\",\"methods\":{\"checkUpkeep(bytes)\":{\"details\":\"This is the function that the Chainlink Keeper nodes call they look for `upkeepNeeded` to return True. the following should be true for this to return true: 1. The time interval has passed between raffle runs. 2. The lottery is open. 3. The contract has ETH. 4. Implicity, your subscription is funded with LINK.\"},\"constructor\":{\"details\":\"it sets the minimun entry fee depending upon the parameter passed\",\"params\":{\"entranceFee\":\"is the minimum amount the participant should pay to enter in the lottery - set by the creater of the lotter\"}},\"enterLottery()\":{\"details\":\"this function allow players to participate in the lottery with required constraints\"}},\"title\":\"Lottery Contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"constructor\":{\"notice\":\"Constructor\"},\"enterLottery()\":{\"notice\":\"Participate in Lottey\"}},\"notice\":\"This contract is for creating a lottery and picking a winner faily\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Lottery.sol\":\"Lottery\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\\n * @dev 1. The fulfillment came from the VRFCoordinator\\n * @dev 2. The consumer contract implements fulfillRandomWords.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash). Create subscription, fund it\\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\\n * @dev subscription management functions).\\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\\n * @dev callbackGasLimit, numWords),\\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomWords method.\\n *\\n * @dev The randomness argument to fulfillRandomWords is a set of random words\\n * @dev generated from your requestId and the blockHash of the request.\\n *\\n * @dev If your contract could have concurrent requests open, you can use the\\n * @dev requestId returned from requestRandomWords to track which response is associated\\n * @dev with which randomness request.\\n * @dev See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ.\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request. It is for this reason that\\n * @dev that you can signal to an oracle you'd like them to wait longer before\\n * @dev responding to the request (however this is not enforced in the contract\\n * @dev and so remains effective only in the case of unmodified oracle software).\\n */\\nabstract contract VRFConsumerBaseV2 {\\n  error OnlyCoordinatorCanFulfill(address have, address want);\\n  address private immutable vrfCoordinator;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   */\\n  constructor(address _vrfCoordinator) {\\n    vrfCoordinator = _vrfCoordinator;\\n  }\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomWords the VRF output expanded to the requested number of words\\n   */\\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\\n    if (msg.sender != vrfCoordinator) {\\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\\n    }\\n    fulfillRandomWords(requestId, randomWords);\\n  }\\n}\\n\",\"keccak256\":\"0x3d709a5e0f1f9b8841172b10ba8af785dd51a13eda9fc395723a706e51329904\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AutomationCompatibleInterface {\\n  /**\\n   * @notice method that is simulated by the keepers to see if any work actually\\n   * needs to be performed. This method does does not actually need to be\\n   * executable, and since it is only ever simulated it can consume lots of gas.\\n   * @dev To ensure that it is never called, you may want to add the\\n   * cannotExecute modifier from KeeperBase to your implementation of this\\n   * method.\\n   * @param checkData specified in the upkeep registration so it is always the\\n   * same for a registered upkeep. This can easily be broken down into specific\\n   * arguments using `abi.decode`, so multiple upkeeps can be registered on the\\n   * same contract and easily differentiated by the contract.\\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\\n   * performUpkeep or not.\\n   * @return performData bytes that the keeper should call performUpkeep with, if\\n   * upkeep is needed. If you would like to encode data to decode later, try\\n   * `abi.encode`.\\n   */\\n  function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);\\n\\n  /**\\n   * @notice method that is actually executed by the keepers, via the registry.\\n   * The data returned by the checkUpkeep simulation will be passed into\\n   * this method to actually be executed.\\n   * @dev The input to this method should not be trusted, and the caller of the\\n   * method should not even be restricted to any single registry. Anyone should\\n   * be able call it, and the input should be validated, there is no guarantee\\n   * that the data passed in is the performData returned from checkUpkeep. This\\n   * could happen due to malicious keepers, racing keepers, or simply a state\\n   * change while the performUpkeep transaction is waiting for confirmation.\\n   * Always validate the data passed in.\\n   * @param performData is the data which was passed back from the checkData\\n   * simulation. If it is encoded, it can easily be decoded into other types by\\n   * calling `abi.decode`. This data should not be trusted, and should be\\n   * validated against the contract's current state.\\n   */\\n  function performUpkeep(bytes calldata performData) external;\\n}\\n\",\"keccak256\":\"0x67076747c6f66d8d43472a56e72879c350056bff82e069addaf9064922863340\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface VRFCoordinatorV2Interface {\\n  /**\\n   * @notice Get configuration relevant for making requests\\n   * @return minimumRequestConfirmations global min for request confirmations\\n   * @return maxGasLimit global max for request gas limit\\n   * @return s_provingKeyHashes list of registered key hashes\\n   */\\n  function getRequestConfig()\\n    external\\n    view\\n    returns (\\n      uint16,\\n      uint32,\\n      bytes32[] memory\\n    );\\n\\n  /**\\n   * @notice Request a set of random words.\\n   * @param keyHash - Corresponds to a particular oracle job which uses\\n   * that key for generating the VRF proof. Different keyHash's have different gas price\\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\\n   * @param subId  - The ID of the VRF subscription. Must be funded\\n   * with the minimum subscription balance required for the selected keyHash.\\n   * @param minimumRequestConfirmations - How many blocks you'd like the\\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\\n   * for why you may want to request more. The acceptable range is\\n   * [minimumRequestBlockConfirmations, 200].\\n   * @param callbackGasLimit - How much gas you'd like to receive in your\\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\\n   * may be slightly less than this amount because of gas used calling the function\\n   * (argument decoding etc.), so you may need to request slightly more than you expect\\n   * to have inside fulfillRandomWords. The acceptable range is\\n   * [0, maxGasLimit]\\n   * @param numWords - The number of uint256 random values you'd like to receive\\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\\n   * @return requestId - A unique identifier of the request. Can be used to match\\n   * a request to a response in fulfillRandomWords.\\n   */\\n  function requestRandomWords(\\n    bytes32 keyHash,\\n    uint64 subId,\\n    uint16 minimumRequestConfirmations,\\n    uint32 callbackGasLimit,\\n    uint32 numWords\\n  ) external returns (uint256 requestId);\\n\\n  /**\\n   * @notice Create a VRF subscription.\\n   * @return subId - A unique subscription id.\\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n   * @dev Note to fund the subscription, use transferAndCall. For example\\n   * @dev  LINKTOKEN.transferAndCall(\\n   * @dev    address(COORDINATOR),\\n   * @dev    amount,\\n   * @dev    abi.encode(subId));\\n   */\\n  function createSubscription() external returns (uint64 subId);\\n\\n  /**\\n   * @notice Get a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @return balance - LINK balance of the subscription in juels.\\n   * @return reqCount - number of requests for this subscription, determines fee tier.\\n   * @return owner - owner of the subscription.\\n   * @return consumers - list of consumer address which are able to use this subscription.\\n   */\\n  function getSubscription(uint64 subId)\\n    external\\n    view\\n    returns (\\n      uint96 balance,\\n      uint64 reqCount,\\n      address owner,\\n      address[] memory consumers\\n    );\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @param newOwner - proposed new owner of the subscription\\n   */\\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @dev will revert if original owner of subId has\\n   * not requested that msg.sender become the new owner.\\n   */\\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\\n\\n  /**\\n   * @notice Add a consumer to a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - New consumer which can use the subscription\\n   */\\n  function addConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Remove a consumer from a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - Consumer to remove from the subscription\\n   */\\n  function removeConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Cancel a subscription\\n   * @param subId - ID of the subscription\\n   * @param to - Where to send the remaining LINK to\\n   */\\n  function cancelSubscription(uint64 subId, address to) external;\\n\\n  /*\\n   * @notice Check to see if there exists a request commitment consumers\\n   * for all consumers and keyhashes for a given sub.\\n   * @param subId - ID of the subscription\\n   * @return true if there exists at least one unfulfilled request for the subscription, false\\n   * otherwise.\\n   */\\n  function pendingRequestExists(uint64 subId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x54cdc97717cbae1a51a5500c8ee4875ebf056c95b54d2155a9544a79cb4f4494\",\"license\":\"MIT\"},\"contracts/Lottery.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.9;\\n\\n/* Imports */\\nimport \\\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol\\\";\\n\\n/* Error codes */\\nerror Lottery__InsufficientEntranceFee();\\nerror Lottery__TransferFailed();\\nerror Lottery__NotOpen();\\nerror Lottery_UpkeepNotNeeded(\\n    uint256 currentBalance,\\n    uint256 numPlayers,\\n    uint256 lotteryState\\n);\\n\\n/** @title Lottery Contract\\n * @author Aditya Padekar\\n * @notice This contract is for creating a lottery and picking a winner faily\\n * @dev This contract implements the Chainlink VRF version 2 in order to implement true randomness\\n */\\ncontract Lottery is VRFConsumerBaseV2, AutomationCompatibleInterface {\\n    /* Types */\\n    enum LotteryState {\\n        OPEN,\\n        CALCULATING\\n    }\\n\\n    /* State Variables */\\n    uint256 private immutable i_entranceFee;\\n    address payable[] private s_players;\\n\\n    /* Randomness VRF V2 Variables */\\n    VRFCoordinatorV2Interface private immutable i_vrfCoordinator;\\n    bytes32 private immutable i_gasLane;\\n    uint64 private immutable i_subscriptionId;\\n    uint16 private constant REQUEST_CONFIRMATIONS = 3;\\n    uint32 private immutable i_callbackGasLimit;\\n    uint32 private constant NUM_WORDS = 1;\\n\\n    /* Lottery Variables */\\n    address private s_recentWinner;\\n    LotteryState private s_lotteryState; \\n    uint256 private s_lastTimeStamp;\\n    uint256 private immutable i_interval;\\n\\n    /* Events */\\n    event LotteryEnter(address indexed player);\\n    event LotteryWinner(uint256 indexed requestId);\\n    event WinnerPicked(address indexed winner);\\n\\n    /** Constructor\\n     * @param  entranceFee is the minimum amount the participant should pay to\\n     * enter in the lottery - set by the creater of the lotter\\n     * @dev it sets the minimun entry fee depending upon the parameter passed\\n     */\\n    constructor(\\n        address vrfCoordinatorV2,\\n        uint256 entranceFee,\\n        bytes32 gasLane,\\n        uint64 subscriptionId,\\n        uint32 callbackGasLimit,\\n        uint256 interval\\n    ) VRFConsumerBaseV2(vrfCoordinatorV2) {\\n        i_entranceFee = entranceFee;\\n        i_vrfCoordinator = VRFCoordinatorV2Interface(vrfCoordinatorV2);\\n        i_gasLane = gasLane;\\n        i_subscriptionId = subscriptionId;\\n        i_callbackGasLimit = callbackGasLimit;\\n        s_lotteryState = LotteryState.OPEN;\\n        s_lastTimeStamp = block.timestamp;\\n        i_interval = interval;\\n    }\\n\\n    /** Participate in Lottey\\n     * @dev this function allow players to participate in the lottery\\n     * with required constraints\\n     */\\n    function enterLottery() public payable {\\n        if (msg.value < i_entranceFee)\\n            revert Lottery__InsufficientEntranceFee();\\n\\n        if (s_lotteryState != LotteryState.OPEN) revert Lottery__NotOpen();\\n\\n        s_players.push(payable(msg.sender));\\n        emit  LotteryEnter(msg.sender);\\n    }\\n\\n    /**\\n     * @dev This is the function that the Chainlink Keeper nodes call\\n     * they look for `upkeepNeeded` to return True.\\n     * the following should be true for this to return true:\\n     * 1. The time interval has passed between raffle runs.\\n     * 2. The lottery is open.\\n     * 3. The contract has ETH.\\n     * 4. Implicity, your subscription is funded with LINK.\\n     */\\n    function checkUpkeep(\\n        bytes memory /* checkData */\\n    )\\n        public\\n        override\\n        returns (bool upkeepNeeded, bytes memory /* performData */)\\n    {\\n        bool isOpen = (LotteryState.OPEN == s_lotteryState);\\n        bool timePassed = ((block.timestamp - s_lastTimeStamp) > i_interval);\\n        bool hasPlayers = (s_players.length > 0);\\n        bool hasBalance = (address(this).balance > 0);\\n        upkeepNeeded = (isOpen && timePassed && hasPlayers && hasBalance);\\n    }\\n\\n    // function performUpkeep(bytes calldata performData) external override {}\\n\\n    function performUpkeep(bytes calldata /* performData */) external override {\\n        (bool upkeepNeeded, ) = checkUpkeep(\\\"\\\");\\n\\n        if (!upkeepNeeded)\\n            revert Lottery_UpkeepNotNeeded(\\n                address(this).balance,\\n                s_players.length,\\n                uint256(s_lotteryState)\\n            );\\n\\n        s_lotteryState = LotteryState.CALCULATING;\\n\\n        uint256 requestId = i_vrfCoordinator.requestRandomWords(\\n            i_gasLane,\\n            i_subscriptionId,\\n            REQUEST_CONFIRMATIONS,\\n            i_callbackGasLimit,\\n            NUM_WORDS\\n        );\\n\\n        emit LotteryWinner(requestId);\\n    }\\n\\n    function fulfillRandomWords(\\n        uint256 /* requestId */,\\n        uint256[] memory randomWords\\n    ) internal override {\\n        uint256 indexOfWinner = randomWords[0] % s_players.length;\\n        address payable recentWinner = s_players[indexOfWinner];\\n        s_recentWinner = recentWinner;\\n\\n        s_players = new address payable[](0);\\n        s_lastTimeStamp = block.timestamp;\\n\\n        s_lotteryState = LotteryState.OPEN;\\n\\n        (bool success,) = recentWinner.call{value: address(this).balance}(\\\"\\\");\\n        if (!success) revert Lottery__TransferFailed();\\n\\n        emit WinnerPicked(recentWinner);\\n    }\\n\\n    function getLotteryState() public view returns (LotteryState){\\n        return s_lotteryState;\\n    }\\n\\n    function getNumWords() public pure returns(uint256){\\n        return NUM_WORDS;\\n    }\\n\\n    function getRequestConfirmations() public pure returns(uint256){\\n        return REQUEST_CONFIRMATIONS;\\n    }\\n\\n    function getRecentWinner() public view returns (address) {\\n        return s_recentWinner;\\n    }\\n    \\n    function getPlayer(uint256 index) public view returns (address) {\\n        return s_players[index];\\n    }\\n    \\n    function getLastTimeStamp() public view returns(uint256){\\n        return s_lastTimeStamp;\\n    }\\n    \\n    function getInterval() public view returns(uint256){\\n        return i_interval;\\n    }\\n    \\n    function getEntranceFee() public view returns (uint256) {\\n        return i_entranceFee;\\n    }\\n\\n    function getNumberOfPlayers() public view returns(uint256){\\n        return s_players.length;\\n    }\\n\\n}\\n\",\"keccak256\":\"0x9e244edc7fb1623f22d8ac4ca3c7ef9c41254d1ee9fa6f55b32a377e11dea0db\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x6101606040523480156200001257600080fd5b506040516200180238038062001802833981810160405281019062000038919062000294565b858073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1681525050508460a081815250508573ffffffffffffffffffffffffffffffffffffffff1660c08173ffffffffffffffffffffffffffffffffffffffff16815250508360e081815250508267ffffffffffffffff166101008167ffffffffffffffff16815250508163ffffffff166101208163ffffffff16815250506000600160146101000a81548160ff021916908360018111156200010d576200010c62000330565b5b0217905550426002819055508061014081815250505050505050506200035f565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620001608262000133565b9050919050565b620001728162000153565b81146200017e57600080fd5b50565b600081519050620001928162000167565b92915050565b6000819050919050565b620001ad8162000198565b8114620001b957600080fd5b50565b600081519050620001cd81620001a2565b92915050565b6000819050919050565b620001e881620001d3565b8114620001f457600080fd5b50565b6000815190506200020881620001dd565b92915050565b600067ffffffffffffffff82169050919050565b6200022d816200020e565b81146200023957600080fd5b50565b6000815190506200024d8162000222565b92915050565b600063ffffffff82169050919050565b6200026e8162000253565b81146200027a57600080fd5b50565b6000815190506200028e8162000263565b92915050565b60008060008060008060c08789031215620002b457620002b36200012e565b5b6000620002c489828a0162000181565b9650506020620002d789828a01620001bc565b9550506040620002ea89828a01620001f7565b9450506060620002fd89828a016200023c565b93505060806200031089828a016200027d565b92505060a06200032389828a01620001bc565b9150509295509295509295565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60805160a05160c05160e051610100516101205161014051611433620003cf6000396000818161066e01526106dc01526000610515015260006104f2015260006104d1015260006104950152600081816102fa0152610702015260008181610320015261037401526114336000f3fe6080604052600436106100c25760003560e01c80636b68c03c1161007f578063c1af578511610059578063c1af578514610259578063c1c244e814610263578063e55ae4e81461028e578063fd6673f5146102cb576100c2565b80636b68c03c146101c55780636e04ff0d146101f057806391ad27b41461022e576100c2565b806309bc33a7146100c75780631fe543e3146100f25780634585e33b1461011b578063473f1ddc1461014457806353a2c19a1461016f5780635f1b0fd81461019a575b600080fd5b3480156100d357600080fd5b506100dc6102f6565b6040516100e99190610bbd565b60405180910390f35b3480156100fe57600080fd5b5061011960048036038101906101149190610d71565b61031e565b005b34801561012757600080fd5b50610142600480360381019061013d9190610e28565b6103de565b005b34801561015057600080fd5b506101596105ce565b6040516101669190610eb6565b60405180910390f35b34801561017b57600080fd5b506101846105f8565b6040516101919190610bbd565b60405180910390f35b3480156101a657600080fd5b506101af610607565b6040516101bc9190610bbd565b60405180910390f35b3480156101d157600080fd5b506101da610614565b6040516101e79190610f48565b60405180910390f35b3480156101fc57600080fd5b5061021760048036038101906102129190611018565b61062b565b6040516102259291906110fb565b60405180910390f35b34801561023a57600080fd5b506102436106d8565b6040516102509190610bbd565b60405180910390f35b610261610700565b005b34801561026f57600080fd5b5061027861086f565b6040516102859190610bbd565b60405180910390f35b34801561029a57600080fd5b506102b560048036038101906102b0919061112b565b610879565b6040516102c29190610eb6565b60405180910390f35b3480156102d757600080fd5b506102e06108c0565b6040516102ed9190610bbd565b60405180910390f35b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103d057337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f40000000000000000000000000000000000000000000000000000000081526004016103c7929190611158565b60405180910390fd5b6103da82826108cc565b5050565b60006103f86040518060200160405280600081525061062b565b509050806104675747600080549050600160149054906101000a900460ff16600181111561042957610428610ed1565b5b6040517f6f118e9000000000000000000000000000000000000000000000000000000000815260040161045e93929190611181565b60405180910390fd5b60018060146101000a81548160ff0219169083600181111561048c5761048b610ed1565b5b021790555060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060037f000000000000000000000000000000000000000000000000000000000000000060016040518663ffffffff1660e01b8152600401610556959493929190611230565b6020604051808303816000875af1158015610575573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105999190611298565b9050807f3bff006d7299c12e73681b095bb578644f86d922571dbf355725a0f3548752ed60405160405180910390a250505050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600163ffffffff16905090565b6000600361ffff16905090565b6000600160149054906101000a900460ff16905090565b600060606000600160149054906101000a900460ff16600181111561065357610652610ed1565b5b6000600181111561066757610666610ed1565b5b14905060007f00000000000000000000000000000000000000000000000000000000000000006002544261069b91906112f4565b119050600080600080549050119050600080471190508380156106bb5750825b80156106c45750815b80156106cd5750805b955050505050915091565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b7f000000000000000000000000000000000000000000000000000000000000000034101561075a576040517f959bfed800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600181111561076e5761076d610ed1565b5b600160149054906101000a900460ff1660018111156107905761078f610ed1565b5b146107c7576040517fe76be6fc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167f1d64fb5ba9f2548c5b98468d58f25b87b9e866afee0122e92d9fe722bf85076c60405160405180910390a2565b6000600254905090565b600080828154811061088e5761088d611328565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60008080549050905090565b60008080549050826000815181106108e7576108e6611328565b5b60200260200101516108f99190611386565b905060008082815481106109105761090f611328565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600067ffffffffffffffff81111561099957610998610c2e565b5b6040519080825280602002602001820160405280156109c75781602001602082028036833780820191505090505b50600090805190602001906109dd929190610afd565b50426002819055506000600160146101000a81548160ff02191690836001811115610a0b57610a0a610ed1565b5b021790555060008173ffffffffffffffffffffffffffffffffffffffff1647604051610a36906113e8565b60006040518083038185875af1925050503d8060008114610a73576040519150601f19603f3d011682016040523d82523d6000602084013e610a78565b606091505b5050905080610ab3576040517f1c94012000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff167f5b690ec4a06fe979403046eaeea5b3ce38524683c3001f662c8b5a829632f7df60405160405180910390a25050505050565b828054828255906000526020600020908101928215610b76579160200282015b82811115610b755782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610b1d565b5b509050610b839190610b87565b5090565b5b80821115610ba0576000816000905550600101610b88565b5090565b6000819050919050565b610bb781610ba4565b82525050565b6000602082019050610bd26000830184610bae565b92915050565b6000604051905090565b600080fd5b600080fd5b610bf581610ba4565b8114610c0057600080fd5b50565b600081359050610c1281610bec565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610c6682610c1d565b810181811067ffffffffffffffff82111715610c8557610c84610c2e565b5b80604052505050565b6000610c98610bd8565b9050610ca48282610c5d565b919050565b600067ffffffffffffffff821115610cc457610cc3610c2e565b5b602082029050602081019050919050565b600080fd5b6000610ced610ce884610ca9565b610c8e565b90508083825260208201905060208402830185811115610d1057610d0f610cd5565b5b835b81811015610d395780610d258882610c03565b845260208401935050602081019050610d12565b5050509392505050565b600082601f830112610d5857610d57610c18565b5b8135610d68848260208601610cda565b91505092915050565b60008060408385031215610d8857610d87610be2565b5b6000610d9685828601610c03565b925050602083013567ffffffffffffffff811115610db757610db6610be7565b5b610dc385828601610d43565b9150509250929050565b600080fd5b60008083601f840112610de857610de7610c18565b5b8235905067ffffffffffffffff811115610e0557610e04610dcd565b5b602083019150836001820283011115610e2157610e20610cd5565b5b9250929050565b60008060208385031215610e3f57610e3e610be2565b5b600083013567ffffffffffffffff811115610e5d57610e5c610be7565b5b610e6985828601610dd2565b92509250509250929050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610ea082610e75565b9050919050565b610eb081610e95565b82525050565b6000602082019050610ecb6000830184610ea7565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60028110610f1157610f10610ed1565b5b50565b6000819050610f2282610f00565b919050565b6000610f3282610f14565b9050919050565b610f4281610f27565b82525050565b6000602082019050610f5d6000830184610f39565b92915050565b600080fd5b600067ffffffffffffffff821115610f8357610f82610c2e565b5b610f8c82610c1d565b9050602081019050919050565b82818337600083830152505050565b6000610fbb610fb684610f68565b610c8e565b905082815260208101848484011115610fd757610fd6610f63565b5b610fe2848285610f99565b509392505050565b600082601f830112610fff57610ffe610c18565b5b813561100f848260208601610fa8565b91505092915050565b60006020828403121561102e5761102d610be2565b5b600082013567ffffffffffffffff81111561104c5761104b610be7565b5b61105884828501610fea565b91505092915050565b60008115159050919050565b61107681611061565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b838110156110b657808201518184015260208101905061109b565b60008484015250505050565b60006110cd8261107c565b6110d78185611087565b93506110e7818560208601611098565b6110f081610c1d565b840191505092915050565b6000604082019050611110600083018561106d565b818103602083015261112281846110c2565b90509392505050565b60006020828403121561114157611140610be2565b5b600061114f84828501610c03565b91505092915050565b600060408201905061116d6000830185610ea7565b61117a6020830184610ea7565b9392505050565b60006060820190506111966000830186610bae565b6111a36020830185610bae565b6111b06040830184610bae565b949350505050565b6000819050919050565b6111cb816111b8565b82525050565b600067ffffffffffffffff82169050919050565b6111ee816111d1565b82525050565b600061ffff82169050919050565b61120b816111f4565b82525050565b600063ffffffff82169050919050565b61122a81611211565b82525050565b600060a08201905061124560008301886111c2565b61125260208301876111e5565b61125f6040830186611202565b61126c6060830185611221565b6112796080830184611221565b9695505050505050565b60008151905061129281610bec565b92915050565b6000602082840312156112ae576112ad610be2565b5b60006112bc84828501611283565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006112ff82610ba4565b915061130a83610ba4565b9250828203905081811115611322576113216112c5565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061139182610ba4565b915061139c83610ba4565b9250826113ac576113ab611357565b5b828206905092915050565b600081905092915050565b50565b60006113d26000836113b7565b91506113dd826113c2565b600082019050919050565b60006113f3826113c5565b915081905091905056fea26469706673582212202c000586be7538ff55f80650ee899edcdf3b7105b3df4f3eaaf2f8cdd1f8440e64736f6c63430008130033",
  "deployedBytecode": "0x6080604052600436106100c25760003560e01c80636b68c03c1161007f578063c1af578511610059578063c1af578514610259578063c1c244e814610263578063e55ae4e81461028e578063fd6673f5146102cb576100c2565b80636b68c03c146101c55780636e04ff0d146101f057806391ad27b41461022e576100c2565b806309bc33a7146100c75780631fe543e3146100f25780634585e33b1461011b578063473f1ddc1461014457806353a2c19a1461016f5780635f1b0fd81461019a575b600080fd5b3480156100d357600080fd5b506100dc6102f6565b6040516100e99190610bbd565b60405180910390f35b3480156100fe57600080fd5b5061011960048036038101906101149190610d71565b61031e565b005b34801561012757600080fd5b50610142600480360381019061013d9190610e28565b6103de565b005b34801561015057600080fd5b506101596105ce565b6040516101669190610eb6565b60405180910390f35b34801561017b57600080fd5b506101846105f8565b6040516101919190610bbd565b60405180910390f35b3480156101a657600080fd5b506101af610607565b6040516101bc9190610bbd565b60405180910390f35b3480156101d157600080fd5b506101da610614565b6040516101e79190610f48565b60405180910390f35b3480156101fc57600080fd5b5061021760048036038101906102129190611018565b61062b565b6040516102259291906110fb565b60405180910390f35b34801561023a57600080fd5b506102436106d8565b6040516102509190610bbd565b60405180910390f35b610261610700565b005b34801561026f57600080fd5b5061027861086f565b6040516102859190610bbd565b60405180910390f35b34801561029a57600080fd5b506102b560048036038101906102b0919061112b565b610879565b6040516102c29190610eb6565b60405180910390f35b3480156102d757600080fd5b506102e06108c0565b6040516102ed9190610bbd565b60405180910390f35b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103d057337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f40000000000000000000000000000000000000000000000000000000081526004016103c7929190611158565b60405180910390fd5b6103da82826108cc565b5050565b60006103f86040518060200160405280600081525061062b565b509050806104675747600080549050600160149054906101000a900460ff16600181111561042957610428610ed1565b5b6040517f6f118e9000000000000000000000000000000000000000000000000000000000815260040161045e93929190611181565b60405180910390fd5b60018060146101000a81548160ff0219169083600181111561048c5761048b610ed1565b5b021790555060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060037f000000000000000000000000000000000000000000000000000000000000000060016040518663ffffffff1660e01b8152600401610556959493929190611230565b6020604051808303816000875af1158015610575573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105999190611298565b9050807f3bff006d7299c12e73681b095bb578644f86d922571dbf355725a0f3548752ed60405160405180910390a250505050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600163ffffffff16905090565b6000600361ffff16905090565b6000600160149054906101000a900460ff16905090565b600060606000600160149054906101000a900460ff16600181111561065357610652610ed1565b5b6000600181111561066757610666610ed1565b5b14905060007f00000000000000000000000000000000000000000000000000000000000000006002544261069b91906112f4565b119050600080600080549050119050600080471190508380156106bb5750825b80156106c45750815b80156106cd5750805b955050505050915091565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b7f000000000000000000000000000000000000000000000000000000000000000034101561075a576040517f959bfed800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600181111561076e5761076d610ed1565b5b600160149054906101000a900460ff1660018111156107905761078f610ed1565b5b146107c7576040517fe76be6fc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167f1d64fb5ba9f2548c5b98468d58f25b87b9e866afee0122e92d9fe722bf85076c60405160405180910390a2565b6000600254905090565b600080828154811061088e5761088d611328565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60008080549050905090565b60008080549050826000815181106108e7576108e6611328565b5b60200260200101516108f99190611386565b905060008082815481106109105761090f611328565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600067ffffffffffffffff81111561099957610998610c2e565b5b6040519080825280602002602001820160405280156109c75781602001602082028036833780820191505090505b50600090805190602001906109dd929190610afd565b50426002819055506000600160146101000a81548160ff02191690836001811115610a0b57610a0a610ed1565b5b021790555060008173ffffffffffffffffffffffffffffffffffffffff1647604051610a36906113e8565b60006040518083038185875af1925050503d8060008114610a73576040519150601f19603f3d011682016040523d82523d6000602084013e610a78565b606091505b5050905080610ab3576040517f1c94012000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff167f5b690ec4a06fe979403046eaeea5b3ce38524683c3001f662c8b5a829632f7df60405160405180910390a25050505050565b828054828255906000526020600020908101928215610b76579160200282015b82811115610b755782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610b1d565b5b509050610b839190610b87565b5090565b5b80821115610ba0576000816000905550600101610b88565b5090565b6000819050919050565b610bb781610ba4565b82525050565b6000602082019050610bd26000830184610bae565b92915050565b6000604051905090565b600080fd5b600080fd5b610bf581610ba4565b8114610c0057600080fd5b50565b600081359050610c1281610bec565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610c6682610c1d565b810181811067ffffffffffffffff82111715610c8557610c84610c2e565b5b80604052505050565b6000610c98610bd8565b9050610ca48282610c5d565b919050565b600067ffffffffffffffff821115610cc457610cc3610c2e565b5b602082029050602081019050919050565b600080fd5b6000610ced610ce884610ca9565b610c8e565b90508083825260208201905060208402830185811115610d1057610d0f610cd5565b5b835b81811015610d395780610d258882610c03565b845260208401935050602081019050610d12565b5050509392505050565b600082601f830112610d5857610d57610c18565b5b8135610d68848260208601610cda565b91505092915050565b60008060408385031215610d8857610d87610be2565b5b6000610d9685828601610c03565b925050602083013567ffffffffffffffff811115610db757610db6610be7565b5b610dc385828601610d43565b9150509250929050565b600080fd5b60008083601f840112610de857610de7610c18565b5b8235905067ffffffffffffffff811115610e0557610e04610dcd565b5b602083019150836001820283011115610e2157610e20610cd5565b5b9250929050565b60008060208385031215610e3f57610e3e610be2565b5b600083013567ffffffffffffffff811115610e5d57610e5c610be7565b5b610e6985828601610dd2565b92509250509250929050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610ea082610e75565b9050919050565b610eb081610e95565b82525050565b6000602082019050610ecb6000830184610ea7565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60028110610f1157610f10610ed1565b5b50565b6000819050610f2282610f00565b919050565b6000610f3282610f14565b9050919050565b610f4281610f27565b82525050565b6000602082019050610f5d6000830184610f39565b92915050565b600080fd5b600067ffffffffffffffff821115610f8357610f82610c2e565b5b610f8c82610c1d565b9050602081019050919050565b82818337600083830152505050565b6000610fbb610fb684610f68565b610c8e565b905082815260208101848484011115610fd757610fd6610f63565b5b610fe2848285610f99565b509392505050565b600082601f830112610fff57610ffe610c18565b5b813561100f848260208601610fa8565b91505092915050565b60006020828403121561102e5761102d610be2565b5b600082013567ffffffffffffffff81111561104c5761104b610be7565b5b61105884828501610fea565b91505092915050565b60008115159050919050565b61107681611061565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b838110156110b657808201518184015260208101905061109b565b60008484015250505050565b60006110cd8261107c565b6110d78185611087565b93506110e7818560208601611098565b6110f081610c1d565b840191505092915050565b6000604082019050611110600083018561106d565b818103602083015261112281846110c2565b90509392505050565b60006020828403121561114157611140610be2565b5b600061114f84828501610c03565b91505092915050565b600060408201905061116d6000830185610ea7565b61117a6020830184610ea7565b9392505050565b60006060820190506111966000830186610bae565b6111a36020830185610bae565b6111b06040830184610bae565b949350505050565b6000819050919050565b6111cb816111b8565b82525050565b600067ffffffffffffffff82169050919050565b6111ee816111d1565b82525050565b600061ffff82169050919050565b61120b816111f4565b82525050565b600063ffffffff82169050919050565b61122a81611211565b82525050565b600060a08201905061124560008301886111c2565b61125260208301876111e5565b61125f6040830186611202565b61126c6060830185611221565b6112796080830184611221565b9695505050505050565b60008151905061129281610bec565b92915050565b6000602082840312156112ae576112ad610be2565b5b60006112bc84828501611283565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006112ff82610ba4565b915061130a83610ba4565b9250828203905081811115611322576113216112c5565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061139182610ba4565b915061139c83610ba4565b9250826113ac576113ab611357565b5b828206905092915050565b600081905092915050565b50565b60006113d26000836113b7565b91506113dd826113c2565b600082019050919050565b60006113f3826113c5565b915081905091905056fea26469706673582212202c000586be7538ff55f80650ee899edcdf3b7105b3df4f3eaaf2f8cdd1f8440e64736f6c63430008130033",
  "devdoc": {
    "author": "Aditya Padekar",
    "details": "This contract implements the Chainlink VRF version 2 in order to implement true randomness",
    "kind": "dev",
    "methods": {
      "checkUpkeep(bytes)": {
        "details": "This is the function that the Chainlink Keeper nodes call they look for `upkeepNeeded` to return True. the following should be true for this to return true: 1. The time interval has passed between raffle runs. 2. The lottery is open. 3. The contract has ETH. 4. Implicity, your subscription is funded with LINK."
      },
      "constructor": {
        "details": "it sets the minimun entry fee depending upon the parameter passed",
        "params": {
          "entranceFee": "is the minimum amount the participant should pay to enter in the lottery - set by the creater of the lotter"
        }
      },
      "enterLottery()": {
        "details": "this function allow players to participate in the lottery with required constraints"
      }
    },
    "title": "Lottery Contract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "constructor": {
        "notice": "Constructor"
      },
      "enterLottery()": {
        "notice": "Participate in Lottey"
      }
    },
    "notice": "This contract is for creating a lottery and picking a winner faily",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 204,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "s_players",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_address_payable)dyn_storage"
      },
      {
        "astId": 221,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "s_recentWinner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 224,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "s_lotteryState",
        "offset": 20,
        "slot": "1",
        "type": "t_enum(LotteryState)199"
      },
      {
        "astId": 226,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "s_lastTimeStamp",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_address_payable)dyn_storage": {
        "base": "t_address_payable",
        "encoding": "dynamic_array",
        "label": "address payable[]",
        "numberOfBytes": "32"
      },
      "t_enum(LotteryState)199": {
        "encoding": "inplace",
        "label": "enum Lottery.LotteryState",
        "numberOfBytes": "1"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}